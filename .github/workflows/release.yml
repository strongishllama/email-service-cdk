name: Release
on:
  push:
    tags:
      - v*
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: golangci/golangci-lint-action@v2
        with:
          args: --config=.github/golangci.yml

  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go', 'javascript' ]
    steps:
    - uses: actions/checkout@v2
    - uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
    - uses: github/codeql-action/autobuild@v1
    - uses: github/codeql-action/analyze@v1

  npm-tests:
    name: NPM Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14.x'
    - uses: actions/setup-go@v2
      with:
        go-version: ^1.16
    - name: Install (ignore scripts)
      run: npm ci --ignore-scripts
    - name: Build
      run: npm run build
    - name: Run NPM tests
      run: npm run test

  go-tests:
    name: Go Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        go-version: ^1.16
    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
    - name: Run Go tests
      run: go test -v ./...
      env:
        TEST_EMAIL_FROM: ${{ secrets.TEST_EMAIL_FROM }}
        TEST_EMAIL_RECIPIENTS: ${{ secrets.TEST_EMAIL_RECIPIENTS }}

  publish:
    name: Publish
    needs: [ lint, analyze, npm-tests, go-tests ]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '14.x'
        registry-url: 'https://registry.npmjs.org'
        scope: '@strongishllama'
    - name: Install (ignore scripts)
      run: npm ci --ignore-scripts
    - name: Build
      run: npm run build
    - name: Publish
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Release
    needs: [ lint, analyze, npm-tests, go-tests ]
    runs-on: ubuntu-latest
    # Don't create a release if the tag is a release candidate.
    if: "!contains('${GITHUB_REF#refs/*/}', '-rc.')"
    steps:
    - uses: actions/checkout@v2
    - name: Release
      run: gh release create ${GITHUB_REF#refs/*/} --title ${GITHUB_REF#refs/*/}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
